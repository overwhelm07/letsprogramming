---
layout: post
title: "for문"
description: ""
category: 
tags: []
---
<div class="container container-width">
<div class="content row">    
        
    <div class="page col-md-9">      

        <div class="page-content">
   <table class="tg">
  <tr>
    <th class="tg-0b3v" colspan="2">파이썬 for문 학습하기 전에 checklist</th>
    <th class="tg-031e">O</th>
    <th class="tg-031e">X</th>
  </tr>
  <tr>
    <td class="tg-c7d0">1</td>
    <td class="tg-c7d0">파이썬의 변수명 및 예약어를 학습하기!</td>
    <td class="tg-031e"></td>
    <td class="tg-031e"></td>
  </tr>
  <tr>
    <td class="tg-c7d0">2</td>
    <td class="tg-c7d0">파이썬 기초문 주석문, 치환문을 학습하기!</td>
    <td class="tg-031e"></td>
    <td class="tg-031e"></td>
  </tr>
  <tr>
    <td class="tg-c7d0">3</td>
    <td class="tg-c7d0">파이썬 자료형의 종류와 메모리관리 학습하기!</td>
    <td class="tg-031e"></td>
    <td class="tg-031e"></td>
  </tr>
  <tr>
    <td class="tg-lkh3" colspan="4" rowspan="2">위의 사항은 반복문을 학습하기전에 꼭 학습하세요!!!!</td>
  </tr>
  <tr>
  </tr>
</table>


      <iframe width="560" height="315" src="//www.youtube.com/embed/9LgyKiq_hU0" frameborder="0" allowfullscreen></iframe>
            <p>파이썬의 특징을 가장 잘 대변해주는 것이 바로 이 for문이다. for문은 매우 유용하고 사용할 때 문장 구조가 한눈에 들어오며 이것을 잘만 쓰면 프로그래밍이 즐겁기까지 하다.</p>
            <p>위의 동영상 강의를 보고 아래의 글들을 참고한다면 더 쉽게 이해할 수 있을것이다!!!! </p>
<h2 id="for">for문의 기본구조</h2>
<p>for 문의 기본적인 구조는 다음과 같다.</p>
<pre><code>for &lt;타겟&gt; in &lt;객체&gt;:
     &lt;수행할 문장1&gt;
else:
     &lt;수행할 문장2&gt;
</code></pre>
<p>객체는 리스트, 터플, 문자열과 같은 시퀀스 형이여야 한다. 이 객체는 타겟에 치환되어 <code>&lt;수행할 문장1&gt;, &lt;수행할 문장2&gt;</code>을 수행한다. 여기서 반복에 횟수는 객체의 크기가 된다.</p>


<h2 id="for_1">예제를 통해 for 알아보기</h2>
<p>for문은 예제를 통해서 보는 것이 가장 알기 쉽다. 예제를 따라해 보도록 하자.</p>
<p>예 1) 전형적인 for문</p>
<pre><code>&gt;&gt;&gt; test_list = ['one', 'two', 'three'] 
&gt;&gt;&gt; for i in test_list: 
...     print(i)
... 
one 
two 
three
</code></pre>
<p>['one', 'two', 'three']라는 리스트의 첫 번째 요소인 'one'이 먼저 i변수에 대입된 후 print(i)라는 문장을 수행한다. 다음에 'two'라는 두 번째 요소가 i변수에 대입된 후 print(i)문장을 수행하고 리스트의 마지막 요소까지 이것을 반복한다.</p>
<p>for문의 쓰임새를 알기 위해서 다음을 가정해 보자.</p>
<p><em>“총 5명의 학생이 시험을 보았는데 시험점수가 60점이 넘으면 합격이고 그렇지 않으면 불합격이다. 합격인지 불합격인지에 대한 결과를 보여준다.”</em></p>
<p>우선 5명의 학생의 시험성적을 리스트로 표현 해 보았다.</p>
<pre><code>mark = [90, 25, 67, 45, 80]
</code></pre>
<p>1번 학생은 90점이고 5번 학생은 80점이다.</p>
<p>이런 점수를 차례로 검사해서 합격했는지 불합격했는지에 대한 통보를 해주는 프로그램을 만들어 보자. 역시 에디터로 만들어 보자.</p>
<pre><code># marks1.py
marks = [90, 25, 67, 45, 80]

number = 0 
for mark in marks: 
    number = number +1 
    if mark &gt;= 60: 
        print("%d번 학생은 합격입니다." % number)
    else: 
        print("%d번 학생은 불합격입니다." % number)
</code></pre>
<iframe width="800" height="500" frameborder="0" src="http://pythontutor.com/iframe-embed.html#code=marks+%3D+%5B90,+25,+67,+45,+80%5D%0D%0A%0D%0Anumber+%3D+0+%0D%0Afor+mark+in+marks%3A+%0D%0A++++number+%3D+number+%2B1+%0D%0A++++if+mark+%3E%3D+60%3A+%0D%0A++++++++print(%22%25d%EB%B2%88+%ED%95%99%EC%83%9D%EC%9D%80+%ED%95%A9%EA%B2%A9%EC%9E%85%EB%8B%88%EB%8B%A4.%22+%25+number)%0D%0A++++else%3A+%0D%0A++++++++print(%22%25d%EB%B2%88+%ED%95%99%EC%83%9D%EC%9D%80+%EB%B6%88%ED%95%A9%EA%B2%A9%EC%9E%85%EB%8B%88%EB%8B%A4.%22+%25+number)&origin=opt-frontend.js&cumulative=false&heapPrimitives=false&drawParentPointers=false&textReferences=false&showOnlyOutputs=false&py=2&rawInputLstJSON=%5B%5D&curInstr=0&codeDivWidth=350&codeDivHeight=400"> </iframe>
<p>각각의 학생에게 번호를 붙이기 위해서 number라는 변수를 이용하였다. 점수 리스트인 marks에서 차례로 점수를 꺼내어 mark라는 변수에 대입하고 for안의 문장들을 수행하게 된다. 우선 for문이 한번씩 수행될 때마다 number는 1씩 증가하고 mark가 60이상이면 합격 메시지를 출력하고 60을 넘지 않으면 불합격 메시지를 출력한다.</p>
<h2 id="for-continue">for와 continue</h2>
<p>while문에서 알아보았던 continue가 for문에서도 역시 동일하게 적용이 된다. 즉, for문 안의 문장을 수행하는 도중에 continue문을 만나면 for문의 처음으로 돌아가게 된다.</p>
<p>위의 예제를 그대로 이용해서 60점 이상인 사람에게는 축하 메시지를 보내고 나머지 사람에게는 아무런 메시지도 전하지 않는 프로그램을 만들어 보자.</p>
<pre><code># marks2.py 
marks = [90, 25, 67, 45, 80]

number = 0 
for mark in marks: 
    number = number +1 
    if mark &lt; 60: continue 
    print("%d번 학생 축하합니다. 합격입니다. " % number)
</code></pre>
<p>점수가 60점 이하인 학생일 경우에는 mark &lt; 60이 참이 되어 continue문이 수행된다. 따라서 축하 메시지를 출력하는 부분인 print문을 수행하지 않고 for문의 첫부분으로 돌아가게 된다.</p>
<h2 id="for-range">for와 range함수</h2>
<p>for문은 range라는 숫자 리스트를 자동으로 만들어 주는 함수와 함께 사용되는 경우가 많다. 다음은 range함수의 간단한 사용법이다.</p>
<pre><code>&gt;&gt;&gt; a = range(10) 
&gt;&gt;&gt; a 
range(0, 10)
</code></pre>
<p>위에서 보는 것과 같이 range(10)은 0부터 9까지의 숫자 range객체를 만들어 준다.</p>
<p>시작 번호와 끝 번호를 지정하려면 다음과 같이 해야 한다. 끝 번호는 포함되지 않는다.</p>
<pre><code>&gt;&gt;&gt; a = range(1, 11) 
&gt;&gt;&gt; a 
range(1, 11)
</code></pre>
<p>위처럼 시작 숫자를 정해 줄 수도 있다.</p>
<p>for와 range를 이용하면 1부터 10까지 더하는 것을 다음과 같이 쉽게 구현할 수 있다.</p>
<p>예 ) 1부터 10까지의 합</p>
<pre><code>&gt;&gt;&gt; sum = 0 
&gt;&gt;&gt; for i in range(1, 11): 
. . .     sum = sum + i 
. . . 
&gt;&gt;&gt; print(sum)
55
</code></pre>
<iframe width="800" height="500" frameborder="0" src="http://pythontutor.com/iframe-embed.html#code=sum+%3D+0+%0D%0Afor+i+in+range(1,+11)%3A+%0D%0A++++sum+%3D+sum+%2B+i+%0D%0A%0D%0Aprint(sum)&origin=opt-frontend.js&cumulative=false&heapPrimitives=false&drawParentPointers=false&textReferences=false&showOnlyOutputs=false&py=2&rawInputLstJSON=%5B%5D&curInstr=0&codeDivWidth=350&codeDivHeight=400"> </iframe>
<p>range(1, 11)은 숫자 1부터 11까지의 숫자를 데이터로 갖는 자료형이다. 따라서 위의 예에서 i변수에 리스트의 숫자들이 하나씩 차례로 대입되면서 sum = sum + i라는 문장을 수행하게 되어 sum은 최종적으로 55가 되게 된다.</p>
<p>또한 우리가 앞서 살펴 보았던 60점 이상이면 합격인 예제도 range함수를 이용해서 적용시킬 수도 있다. 다음을 보자.</p>
<pre><code>#marks3.py 
marks = [90, 25, 67, 45, 80]

for number in range(len(marks)): 
    if marks[number] &lt; 60: continue 
    print("%d번 학생 축하합니다. 합격입니다." % (number+1))
</code></pre>
<p>len이라는 함수가 처음 나왔는데 len함수는 리스트의 요소 개수를 돌려주는 함수이다. 따라서 위에서 len(marks)는 5가 될것이고 range(len(marks))는 range(5)가 될 것이다. 따라서 number변수에는 차례로 0부터 4까지의 숫자가 대입될 것이고 makrs[number]는 차례대로 90, 25, 67, 45, 80이라는 값을 갖게 될 것이다.</p>
<h3 id="for_2">다양한 for문의 사용</h3>
<pre><code>&gt;&gt;&gt; a = [(1,2), (3,4), (5,6)] 
&gt;&gt;&gt; for (first, last) in a: 
. . .     print(first + last)
. . . 
3 
7 
11
</code></pre>
<p>위의 예는 a리스트의 요소 값이 터플이기 때문에 각각의 요소들이 자동으로 (first, last)라는 변수에 대입되게 된다.</p>
<p>이것은 이미 살펴보았던 터플을 이용한 변수 값 대입방법과 매우 비슷한 경우이다.</p>
<pre><code>&gt;&gt;&gt; (first, last) = (1, 2)
</code></pre>
<h3 id="for-range_1">for와 range를 이용한 구구단</h3>
<p>for와 range함수를 이용하면 단 4줄만으로 구구단을 출력해 볼 수가 있다.</p>
<pre><code>&gt;&gt;&gt; for i in range(2,10): 
...     for j in range(1, 10): 
...         print(i*j, end=" ") 
...     print('') 
... 
2 4 6 8 10 12 14 16 18 
3 6 9 12 15 18 21 24 27 
4 8 12 16 20 24 28 32 36
5 10 15 20 25 30 35 40 45
6 12 18 24 30 36 42 48 54 
7 14 21 28 35 42 49 56 63 
8 16 24 32 40 48 56 64 72 
9 18 27 36 45 54 63 72 81
</code></pre>
<p>위의 예를 보면 for가 두 번 사용되었다. range(2, 10)은 2부터 9까지의 숫자가 차례로 i에 대입된다. i가 처음 2일 때 for 문을 만나게 된다. range(1, 10)은 1부터 10까지의 숫자가 j에 대입되고 그 다음 문장인 print(i*j)를 수행한다. 따라서 i가 2일 때 2*1, 2*2, 2*3, , , ,2*9 까지 차례로 수행되며 그 값을 출력하게 된다. 그 다음에는 i가 3일 때 역시 2일 때와 마찬가지로 수행될 것이고 i가 9일 때까지 계속 반복되게 된다.</p>
<p>위에서 print(i*j, end=" "), 처럼 end 파라미터를 넣어준 이유는 해당 결과값을 출력할 때 다음 줄로 넘어가지 않고 그 줄에 계속해서 출력하기 위한 것이다. 그 다음의 print('')은 2단, 3단, , 등을 구분하기 위해서 두 번째 for문이 끝나면 결과 값을 다음 줄부터 출력하게 해주는 문장이다.</p>
<blockquote>
<p>※ 파이썬 2.7 버전의 경우 위 예제의 <code>print(i*j, end=" ")</code> 대신 <code>print i*j,</code>로 사용해야 한다. </p>
</blockquote>
<p>지금껏 우리는 프로그램의 흐름을 제어하는 if, while, for등에 대해서 알아보았다. 독자는 while과 for를 보면서 두 가지가 아주 흡사하다는 느낌을 받았을 것이다. 실제로 for문을 쓰는 부분을 while로 바꿀 수 있는 경우가 많고 while문을 쓴 부분을 for문으로 바꾸어서 사용할 수 있는 경우가 많다.</p>      
<p>퀴즈!!!!</p>
<!-- begin quiz script -->
<script>
function finish() {
	var ext = '.html';
	var results = new Array("none","correct","incorrect");
	var nums = new Array(3);
	for(var i = 0; i < nums.length; i++) nums[i] = 0;
	for(var i = 1; i <= 2; i++) {
		var q = document.forms['quiz'].elements['question_'+i];
		if(q[0].type=='checkbox') {
			var n = 0;
		}
		for(var j = 0; j < q.length; j++) {
			if(q[j].checked) {
				var a = q[j].value.split(',');
				for(var k = 0; k < a.length; k++) {
					nums[a[k]]++;
				}
				if(q[j].type=='radio') break;
				else n++;
			}
			if(j == q.length-1&&q[j].type=='radio') {nums[0]++;}
		}
		if(q[0].type=='checkbox'&&((document.forms['quiz'].elements['question_'+i+'_min']&&n<document.forms['quiz'].elements['question_'+i+'_min'].value)||(document.forms['quiz'].elements['question_'+i+'_max']&&n>document.forms['quiz'].elements['question_'+i+'_max'].value))) nums[0]++;
	}
	var j = new Array('0');
	for (i in nums) if(nums[i]>nums[j[0]]){j=new Array(''+i);} else if(nums[i]==nums[j[0]])j[j.length] = i;
	//var o = '';for(var i in results)o+=results[i]+'='+nums[i]+'\n';
	//alert(o);
	if(nums[0]!=0) {
		alert('You missed or incorrectly answered '+nums[0]+' questions!');
	}
	else if(j[0]==0) {
		alert('No result could be determined.');
	}
	else {
		location = results[j[0]]+ext;
	}
}
</script>
<!-- end quiz script -->   

<!-- begin quiz html -->
<form name="quiz" action="javascript:finish();">
<fieldset style="width:300px;">
<legend><strong>1. for문은 어떤 함수를 이용해서 숫자 리스트를 자동으로 만들어줄까??   </strong> </legend>
<font size="2" face="Verdana, Arial, Helvetica, sans-serif">
<input name="question_1" type="radio" value="1"> range</font><br /><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
<input name="question_1" type="radio" value="2"> in</font><br /><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
<input name="question_1" type="radio" value="2"> list</font><br />
</fieldset>
<br /><br /><fieldset style="width:300px;">
<legend><strong>2. for 변수 ㅁ 리스트: ㅁ는?</strong> </legend>
<font size="2" face="Verdana, Arial, Helvetica, sans-serif">
<input name="question_2" type="radio" value="2"> one</font><br /><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
<input name="question_2" type="radio" value="2"> go</font><br /><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
<input name="question_2" type="radio" value="1"> in</font><br />
</fieldset>
<br /><br /> <INPUT TYPE="submit" value="Finish">
 <INPUT TYPE="reset" value="Reset">
</form>
<!-- end quiz html -->                 






</div>


{% include JB/setup %}
